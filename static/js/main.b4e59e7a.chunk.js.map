{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["STATES","TILES","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameTiles","displayTiles","timeRemaining","timer","isLocked","btnText","e","rndTiles","rndInts","getFourRandomPositions","rPos","i","length","j","setState","setTimeout","hideCards","bind","push","Math","floor","random","rnd","includes","sort","a","b","setInterval","countDown","clearInterval","revealAnswers","userSelection","toConsumableArray","x","y","_this2","button","react_default","createElement","onClick","startGame","className","map","tiles","key","t","App_Tile","value","toggleCard","Component","Tile","divClass","toggleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4e59e7a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nconst STATES = {\n  BLANK: 0,\n  SELECTED: 1,\n  USER_CHOICE: 2,\n  WRONG: 3,\n  CORRECT: 4\n}\n\nconst TILES = [\n  \"white\",\n  \"blue\",\n  \"yellow\",\n  \"red\",\n  \"green\"\n]\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameTiles: [[0, 0, 0, 0],\n                  [0, 0, 0, 0],\n                  [0, 0, 0, 0]],\n\n      displayTiles: [[0, 0, 0, 0],\n                    [0, 0, 0, 0],\n                    [0, 0, 0, 0]],\n\n      timeRemaining: null,\n      timer: null,\n      isLocked: true,\n\n      btnText: \"Start Game\"\n    };\n  }\n\n  startGame(e) {\n    let rndTiles = [[0, 0, 0, 0],\n                    [0, 0, 0, 0],\n                    [0, 0, 0, 0]];\n\n    let rndInts = this.getFourRandomPositions();\n    let rPos = 0;\n\n    for (let i = 0; i < rndTiles.length; i++) {\n      for (let j = 0; j < rndTiles[i].length; j++) {\n        if (rndInts[rPos] === i * 4 + j) {\n          rndTiles[i][j] = STATES.SELECTED;\n          rPos++;\n        }\n      }\n    }\n\n    this.setState({\n      displayTiles: rndTiles,\n      gameTiles: rndTiles,\n      btnText: null\n    });\n\n    setTimeout(this.hideCards.bind(this), 80);\n  }\n\n  getFourRandomPositions() {\n    let rndInts = [];\n\n    rndInts.push(Math.floor(Math.random() * 12));\n\n    while (rndInts.length < 4) {\n      let rnd = Math.floor(Math.random() * 12);\n      if (!rndInts.includes(rnd)) {\n        rndInts.push(rnd);\n      }\n    }\n\n    rndInts.sort((a, b) => { return a - b });\n\n    return rndInts;\n  }\n\n  hideCards() {\n    this.setState({\n      displayTiles: [[0, 0, 0, 0],\n                    [0, 0, 0, 0],\n                    [0, 0, 0, 0]],\n      timeRemaining: 3,\n      timer: setInterval(this.countDown.bind(this), 1000),\n      isLocked: false\n    });\n  }\n\n  countDown() {\n    let timeRemaining = this.state.timeRemaining;\n\n    timeRemaining--;\n\n    if (timeRemaining === 0) {\n      timeRemaining = null;\n      clearInterval(this.state.timer);\n      this.revealAnswers();\n    }\n\n    this.setState({ timeRemaining: timeRemaining });\n  }\n\n  revealAnswers() {\n    let userSelection = [...this.state.displayTiles];\n    let gameTiles = [...this.state.gameTiles];\n    let displayTiles = [[0, 0, 0, 0],\n                        [0, 0, 0, 0],\n                        [0, 0, 0, 0]];\n\n\n    for (let i = 0; i < userSelection.length; i++) {\n      for (let j = 0; j < userSelection[i].length; j++) {\n        if (userSelection[i][j] === STATES.USER_CHOICE\n          && gameTiles[i][j] === STATES.SELECTED) {\n          displayTiles[i][j] = STATES.CORRECT;\n        }\n        else if (userSelection[i][j] === STATES.USER_CHOICE\n          && gameTiles[i][j] !== STATES.SELECTED) {\n          displayTiles[i][j] = STATES.WRONG;\n        }\n        else if (userSelection[i][j] === STATES.BLANK\n          && gameTiles[i][j] === STATES.SELECTED) {\n          displayTiles[i][j] = STATES.SELECTED;\n        }\n      }\n    }\n\n    this.setState({\n      displayTiles: displayTiles,\n      isLocked: true,\n      btnText: \"Play Again\"\n    });\n  }\n\n  toggleCard(x, y) {\n    if (!this.state.isLocked) {\n      let displayTiles = [...this.state.displayTiles];\n\n      if (displayTiles[y][x] === STATES.BLANK)\n        displayTiles[y][x] = STATES.USER_CHOICE;\n      else\n        displayTiles[y][x] = STATES.BLANK;\n\n      this.setState({ displayTiles: displayTiles });\n    }\n  }\n\n  render() {\n    let button = null;\n    if (this.state.btnText !== null) {\n      button = <button onClick={this.startGame.bind(this)}>{this.state.btnText}</button>;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Memory Game</h1>\n          <h5>(blue cells will flash on the screen, then you have 3 seconds to recall which ones were blue)</h5>\n          <div className=\"text\">{this.state.timeRemaining} &nbsp;</div>\n          {\n            this.state.displayTiles.map((tiles, i) =>\n              <div className=\"row\" key={i}>\n                {\n                  tiles.map((t, j) =>\n                    <Tile key={i * 4 + j} value={t} x={j} y={i} onClick={this.toggleCard.bind(this)} />\n                  )\n                }\n              </div>\n            )\n          }\n          <div className=\"text\">\n            {button}\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\n\nclass Tile extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  toggleClick() {\n    this.props.onClick(this.props.x, this.props.y);\n  }\n\n  render() {\n    let divClass = \"col \";\n    divClass += TILES[this.props.value];\n\n    return (\n      <div className={divClass} onClick={this.toggleClick.bind(this)}></div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}